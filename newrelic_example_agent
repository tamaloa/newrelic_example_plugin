#! /usr/bin/env ruby

#
# This is an example agent which generates synthetic data.
# A 1mHz (one cycle every 16 minutes) sin+1, cos+1 and sin+5 wave is generated,
# using the Unix epoch as the base.
#

require "rubygems"
require "bundler/setup"

require "newrelic_plugin"

module ExampleAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid "de.fraunhofer.moez.ci.passenger-stats"
    agent_version "0.0.1"
    agent_config_options :hertz  # frequency of the periodic functions
    agent_human_labels("Example Agent") { "Synthetic example data" }



    def poll_cycle
      
      passenger_status = '/usr/local/bin/passenger-status'

      #Shamelessly copied from https://github.com/barttenbrinke/munin-plugins-rails
      status = run_command(passenger_status)

      status =~ /max\s+=\s+(\d+)/
      report_metric "passenger.max-processes", "Value", $1
      puts "max.value #{$1}"

      status =~ /count\s+=\s+(\d+)/
      report_metric "passenger.running", "Value", $1
      puts "running.value #{$1}"

      status =~ /active\s+=\s+(\d+)/
      report_metric "passenger.active", "Value", $1
      puts "active.value #{$1}"

      total_sessions = 0
      status.scan(/Sessions: (\d+)/).flatten.each { |count| total_sessions += count.to_i }
      report_metric "passenger.total-sessions", "Value", $1
      puts "sessions.value #{total_sessions}"

    end

    
    private      

    def run_command(command, debug = false)
      result = `#{command}`

      unless $?.success?
        $stderr.puts "failed executing #{command}"
        exit 1
      end

      puts result if debug      
      
      result
    end


  end

  #
  # Register this agent with the component.
  # The ExampleAgent is the name of the module that defines this
  # driver (the module must contain at least three classes - a
  # PollCycle, a Metric and an Agent class, as defined above).
  #
  NewRelic::Plugin::Setup.install_agent :example, ExampleAgent

  #
  # Launch the agent; this never returns.
  #
  NewRelic::Plugin::Run.setup_and_run

end
